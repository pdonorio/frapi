"""
# == Modelling ReThinkDB tables in my collection ==
"""

# My ORM library of choise with RethinkDB
from rethinkORM import RethinkModel
from types import NoneType, BooleanType, IntType, FloatType, LongType, StringType

TESTING_TABLE = 'test'

# == Implements ORM models to use inside my Database ==

class GenericORMModel(RethinkModel):
    """ The most generic model """
    # Setup table to use inside RethinkDB
    table = TESTING_TABLE
    # 'id' (autogenerated) is the primary key in a RethinkModel

    @classmethod
    def list_attributes(cls):
        """ Cycle class attributes to get a list.
        Usable on the class, rather then instance"""
        attributes = {}
        # Here i decide which are the python types that will be
        # accepted in my API resources
        known_types = (NoneType, BooleanType, IntType, FloatType, LongType, StringType)
        #https://docs.python.org/2/library/types.html

        for key in cls.__dict__.keys():
            # skip:
            # 1. magic methods ( e.g. __name__ )
            # 2. and also "table" name
            if key[0:2] != "__" and key != "table":
                value = getattr(cls, key)
                # skip methods (which are not strings and integer?)
                if isinstance(value, known_types):
                    #print "Attr:", key, value
                    attributes[key] = value
        return attributes

class DataDump(GenericORMModel):
    """ A simple container for data dumping """
    table = 'dump'
    # Attributes:
    key = 'label'
    value = 'associatedtolabel'

    # test1 = 12
    # test2 = 13.12
    # test3 = True
    # test4 = False
    # test5 = None

class APIUser(GenericORMModel):
    """ Security model """
    table = 'users'
    username = "unknown"

    """ Other attributes:
    password = db.StringProperty(required=True)
    salt = db.StringProperty()
    role = db.StringProperty()
    created = db.DateTimeProperty(auto_now_add=True)
    modified = db.DateTimeProperty(auto_now=True)
    """


